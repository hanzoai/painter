name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget git

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt

    - name: Run unit tests
      run: |
        make test-unit

    - name: Run integration tests
      run: |
        make test-integration

    - name: Generate coverage report
      run: |
        pip install pytest-cov
        python -m pytest --cov=. --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Lint with ruff
      run: |
        ruff check tests/ || true

    - name: Format check with ruff
      run: |
        ruff format --check tests/ || true

  test-makefile:
    name: Test Makefile Targets
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt

    - name: Test make help
      run: make help

    - name: Test make check-deps
      run: make check-deps

    - name: Test make info
      run: make info

    - name: Test make clean
      run: make clean

  test-workflow-validation:
    name: Validate Workflow JSON
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate JSON syntax
      run: |
        python3 -m json.tool inpainting-workflow.json > /dev/null
        echo "✓ Workflow JSON is valid"

    - name: Check workflow structure
      run: |
        python3 << 'EOF'
        import json
        with open('inpainting-workflow.json') as f:
            workflow = json.load(f)

        assert 'nodes' in workflow, "Workflow must have 'nodes' field"
        assert len(workflow['nodes']) > 0, "Workflow must have at least one node"

        print(f"✓ Workflow has {len(workflow['nodes'])} nodes")

        for node in workflow['nodes']:
            assert 'type' in node, f"Node {node.get('id')} missing type"
            assert 'inputs' in node, f"Node {node.get('id')} missing inputs"

        print("✓ All nodes have required fields")
        EOF

  test-documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check required documentation files
      run: |
        files=(
          "README.md"
          "QUICKSTART.md"
          "TESTING.md"
          "tests/README.md"
          "LICENSE"
        )

        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
          echo "✓ Found $file"
        done

    - name: Check documentation links
      run: |
        # Check that README mentions key commands
        if ! grep -q "make setup" README.md; then
          echo "⚠️  README should mention 'make setup'"
        fi
        if ! grep -q "make run" README.md; then
          echo "⚠️  README should mention 'make run'"
        fi
        echo "✓ Documentation check complete"

  test-setup-script:
    name: Validate Setup Script
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check setup.sh syntax
      run: |
        bash -n setup.sh
        echo "✓ setup.sh syntax is valid"

    - name: Verify setup.sh is executable
      run: |
        if [ -x setup.sh ]; then
          echo "✓ setup.sh is executable"
        else
          echo "⚠️  setup.sh should be executable (chmod +x setup.sh)"
        fi

    - name: Check for required components
      run: |
        required_strings=(
          "ComfyUI"
          "custom_nodes"
          "DiffuEraser"
          "VideoHelper"
          "sam2"
        )

        for str in "${required_strings[@]}"; do
          if grep -q "$str" setup.sh; then
            echo "✓ Found reference to $str"
          else
            echo "❌ Missing reference to $str"
            exit 1
          fi
        done

  test-requirements:
    name: Validate Requirements
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Check requirements.txt syntax
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt --dry-run || true
        echo "✓ requirements.txt syntax check complete"

    - name: Check test requirements
      run: |
        pip install -r tests/requirements.txt --dry-run
        echo "✓ tests/requirements.txt is valid"

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, test-makefile, test-workflow-validation, test-documentation, test-setup-script, test-requirements]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All CI checks completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Unit & Integration Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Makefile Tests: ${{ needs.test-makefile.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow Validation: ${{ needs.test-workflow-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation: ${{ needs.test-documentation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Setup Script: ${{ needs.test-setup-script.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Requirements: ${{ needs.test-requirements.result }}" >> $GITHUB_STEP_SUMMARY
